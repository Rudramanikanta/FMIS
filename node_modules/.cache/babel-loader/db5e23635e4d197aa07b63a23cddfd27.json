{"ast":null,"code":"import useEventListener from './useEventListener';\nimport { useCallback } from 'react';\n/**\n * Attaches an event handler outside directly to the `document`,\n * bypassing the react synthetic event system.\n *\n * ```ts\n * useGlobalListener('keydown', (event) => {\n *  console.log(event.key)\n * })\n * ```\n *\n * @param event The DOM event name\n * @param handler An event handler\n * @param capture Whether or not to listen during the capture event phase\n */\n\nexport default function useGlobalListener(event, handler) {\n  var capture = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var documentTarget = useCallback(function () {\n    return document;\n  }, []);\n  return useEventListener(documentTarget, event, handler, capture);\n}","map":{"version":3,"names":["useEventListener","useCallback","useGlobalListener","event","handler","capture","documentTarget","document"],"sources":["D:/react/crp-project/crp/node_modules/@restart/hooks/esm/useGlobalListener.js"],"sourcesContent":["import useEventListener from './useEventListener';\nimport { useCallback } from 'react';\n/**\n * Attaches an event handler outside directly to the `document`,\n * bypassing the react synthetic event system.\n *\n * ```ts\n * useGlobalListener('keydown', (event) => {\n *  console.log(event.key)\n * })\n * ```\n *\n * @param event The DOM event name\n * @param handler An event handler\n * @param capture Whether or not to listen during the capture event phase\n */\nexport default function useGlobalListener(event, handler, capture = false) {\n  const documentTarget = useCallback(() => document, []);\n  return useEventListener(documentTarget, event, handler, capture);\n}"],"mappings":"AAAA,OAAOA,gBAAP,MAA6B,oBAA7B;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,iBAAT,CAA2BC,KAA3B,EAAkCC,OAAlC,EAA4D;EAAA,IAAjBC,OAAiB,uEAAP,KAAO;EACzE,IAAMC,cAAc,GAAGL,WAAW,CAAC;IAAA,OAAMM,QAAN;EAAA,CAAD,EAAiB,EAAjB,CAAlC;EACA,OAAOP,gBAAgB,CAACM,cAAD,EAAiBH,KAAjB,EAAwBC,OAAxB,EAAiCC,OAAjC,CAAvB;AACD"},"metadata":{},"sourceType":"module"}