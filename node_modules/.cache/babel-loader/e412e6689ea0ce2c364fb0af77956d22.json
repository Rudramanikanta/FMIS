{"ast":null,"code":"import useMediaQuery from './useMediaQuery';\nimport { useMemo } from 'react';\n/**\n * Create a responsive hook we a set of breakpoint names and widths.\n * You can use any valid css units as well as a numbers (for pixels).\n *\n * **NOTE:** The object key order is important! it's assumed to be in order from smallest to largest\n *\n * ```ts\n * const useBreakpoint = createBreakpointHook({\n *  xs: 0,\n *  sm: 576,\n *  md: 768,\n *  lg: 992,\n *  xl: 1200,\n * })\n * ```\n *\n * **Watch out!** using string values will sometimes construct media queries using css `calc()` which\n * is NOT supported in media queries by all browsers at the moment. use numbers for\n * the widest range of browser support.\n *\n * @param breakpointValues A object hash of names to breakpoint dimensions\n */\n\nexport function createBreakpointHook(breakpointValues) {\n  const names = Object.keys(breakpointValues);\n\n  function and(query, next) {\n    if (query === next) {\n      return next;\n    }\n\n    return query ? `${query} and ${next}` : next;\n  }\n\n  function getNext(breakpoint) {\n    return names[Math.min(names.indexOf(breakpoint) + 1, names.length - 1)];\n  }\n\n  function getMaxQuery(breakpoint) {\n    const next = getNext(breakpoint);\n    let value = breakpointValues[next];\n    if (typeof value === 'number') value = `${value - 0.2}px`;else value = `calc(${value} - 0.2px)`;\n    return `(max-width: ${value})`;\n  }\n\n  function getMinQuery(breakpoint) {\n    let value = breakpointValues[breakpoint];\n\n    if (typeof value === 'number') {\n      value = `${value}px`;\n    }\n\n    return `(min-width: ${value})`;\n  }\n  /**\n   * Match a set of breakpoints\n   *\n   * ```tsx\n   * const MidSizeOnly = () => {\n   *   const isMid = useBreakpoint({ lg: 'down', sm: 'up' });\n   *\n   *   if (isMid) return <div>On a Reasonable sized Screen!</div>\n   *   return null;\n   * }\n   * ```\n   * @param breakpointMap An object map of breakpoints and directions, queries are constructed using \"and\" to join\n   * breakpoints together\n   * @param window Optionally specify the target window to match against (useful when rendering into iframes)\n   */\n\n  /**\n   * Match a single breakpoint exactly, up, or down.\n   *\n   * ```tsx\n   * const PhoneOnly = () => {\n   *   const isSmall = useBreakpoint('sm', 'down');\n   *\n   *   if (isSmall) return <div>On a Small Screen!</div>\n   *   return null;\n   * }\n   * ```\n   *\n   * @param breakpoint The breakpoint key\n   * @param direction A direction 'up' for a max, 'down' for min, true to match only the breakpoint\n   * @param window Optionally specify the target window to match against (useful when rendering into iframes)\n   */\n\n\n  function useBreakpoint(breakpointOrMap, direction, window) {\n    let breakpointMap;\n\n    if (typeof breakpointOrMap === 'object') {\n      breakpointMap = breakpointOrMap;\n      window = direction;\n      direction = true;\n    } else {\n      direction = direction || true;\n      breakpointMap = {\n        [breakpointOrMap]: direction\n      };\n    }\n\n    let query = useMemo(() => Object.entries(breakpointMap).reduce((query, _ref) => {\n      let [key, direction] = _ref;\n\n      if (direction === 'up' || direction === true) {\n        query = and(query, getMinQuery(key));\n      }\n\n      if (direction === 'down' || direction === true) {\n        query = and(query, getMaxQuery(key));\n      }\n\n      return query;\n    }, ''), [JSON.stringify(breakpointMap)]);\n    return useMediaQuery(query, window);\n  }\n\n  return useBreakpoint;\n}\nconst useBreakpoint = createBreakpointHook({\n  xs: 0,\n  sm: 576,\n  md: 768,\n  lg: 992,\n  xl: 1200,\n  xxl: 1400\n});\nexport default useBreakpoint;","map":{"version":3,"names":["useMediaQuery","useMemo","createBreakpointHook","breakpointValues","names","Object","keys","and","query","next","getNext","breakpoint","Math","min","indexOf","length","getMaxQuery","value","getMinQuery","useBreakpoint","breakpointOrMap","direction","window","breakpointMap","entries","reduce","key","JSON","stringify","xs","sm","md","lg","xl","xxl"],"sources":["D:/react/crp-project/crp/node_modules/@restart/hooks/esm/useBreakpoint.js"],"sourcesContent":["import useMediaQuery from './useMediaQuery';\nimport { useMemo } from 'react';\n/**\n * Create a responsive hook we a set of breakpoint names and widths.\n * You can use any valid css units as well as a numbers (for pixels).\n *\n * **NOTE:** The object key order is important! it's assumed to be in order from smallest to largest\n *\n * ```ts\n * const useBreakpoint = createBreakpointHook({\n *  xs: 0,\n *  sm: 576,\n *  md: 768,\n *  lg: 992,\n *  xl: 1200,\n * })\n * ```\n *\n * **Watch out!** using string values will sometimes construct media queries using css `calc()` which\n * is NOT supported in media queries by all browsers at the moment. use numbers for\n * the widest range of browser support.\n *\n * @param breakpointValues A object hash of names to breakpoint dimensions\n */\nexport function createBreakpointHook(breakpointValues) {\n  const names = Object.keys(breakpointValues);\n  function and(query, next) {\n    if (query === next) {\n      return next;\n    }\n    return query ? `${query} and ${next}` : next;\n  }\n  function getNext(breakpoint) {\n    return names[Math.min(names.indexOf(breakpoint) + 1, names.length - 1)];\n  }\n  function getMaxQuery(breakpoint) {\n    const next = getNext(breakpoint);\n    let value = breakpointValues[next];\n    if (typeof value === 'number') value = `${value - 0.2}px`;else value = `calc(${value} - 0.2px)`;\n    return `(max-width: ${value})`;\n  }\n  function getMinQuery(breakpoint) {\n    let value = breakpointValues[breakpoint];\n    if (typeof value === 'number') {\n      value = `${value}px`;\n    }\n    return `(min-width: ${value})`;\n  }\n\n  /**\n   * Match a set of breakpoints\n   *\n   * ```tsx\n   * const MidSizeOnly = () => {\n   *   const isMid = useBreakpoint({ lg: 'down', sm: 'up' });\n   *\n   *   if (isMid) return <div>On a Reasonable sized Screen!</div>\n   *   return null;\n   * }\n   * ```\n   * @param breakpointMap An object map of breakpoints and directions, queries are constructed using \"and\" to join\n   * breakpoints together\n   * @param window Optionally specify the target window to match against (useful when rendering into iframes)\n   */\n\n  /**\n   * Match a single breakpoint exactly, up, or down.\n   *\n   * ```tsx\n   * const PhoneOnly = () => {\n   *   const isSmall = useBreakpoint('sm', 'down');\n   *\n   *   if (isSmall) return <div>On a Small Screen!</div>\n   *   return null;\n   * }\n   * ```\n   *\n   * @param breakpoint The breakpoint key\n   * @param direction A direction 'up' for a max, 'down' for min, true to match only the breakpoint\n   * @param window Optionally specify the target window to match against (useful when rendering into iframes)\n   */\n\n  function useBreakpoint(breakpointOrMap, direction, window) {\n    let breakpointMap;\n    if (typeof breakpointOrMap === 'object') {\n      breakpointMap = breakpointOrMap;\n      window = direction;\n      direction = true;\n    } else {\n      direction = direction || true;\n      breakpointMap = {\n        [breakpointOrMap]: direction\n      };\n    }\n    let query = useMemo(() => Object.entries(breakpointMap).reduce((query, [key, direction]) => {\n      if (direction === 'up' || direction === true) {\n        query = and(query, getMinQuery(key));\n      }\n      if (direction === 'down' || direction === true) {\n        query = and(query, getMaxQuery(key));\n      }\n      return query;\n    }, ''), [JSON.stringify(breakpointMap)]);\n    return useMediaQuery(query, window);\n  }\n  return useBreakpoint;\n}\nconst useBreakpoint = createBreakpointHook({\n  xs: 0,\n  sm: 576,\n  md: 768,\n  lg: 992,\n  xl: 1200,\n  xxl: 1400\n});\nexport default useBreakpoint;"],"mappings":"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"},"metadata":{},"sourceType":"module"}